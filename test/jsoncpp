//
// Copyright (c) 2020 Carl Chen. All rights reserved.
//
#include <cstdint>
#include <cstring>
#include <iostream>
#include <json/json.h>
#include <json/writer.h>
#include <string>
#include <vector>

#define JM_KVP(var) ::jsonmapper::MakeKVP(#var, var)

namespace jsonmapper {

template <class T>
struct KVP {
    const char* key;
    T& value;
};

template <class T>
KVP<T> MakeKVP(const char* key, T& value)
{
    return KVP<T> { key, value };
}

template <bool isSerialize, class T>
bool Map(Json::Value& root, T& v);

template <bool isSerialize, class T>
struct GenericMapper {
    Json::Value& root_;
    explicit GenericMapper(Json::Value& obj)
        : root_(obj)
    {
    }

    bool operator()(T& i)
    {
        if constexpr (isSerialize) {
            if constexpr (std::is_integral_v<T> || std::is_floating_point_v<T> || std::is_same_v<T, bool> || std::is_same_v<T, std::string>) {
                root_ = i;
                return true;
            } else {
                return Map<isSerialize>(root_, i);
            }
        } else {
            if constexpr (std::is_integral_v<T>) {
                if (!root_.isNumeric()) {
                    return false;
                }
                i = root_.asInt64();
                return true;
            } else if constexpr (std::is_floating_point_v<T>) {
                if (!root_.isNumeric()) {
                    return false;
                }
                i = root_.asDouble();
                return true;
            } else if constexpr (std::is_same_v<T, bool>) {
                if (!root_.isBool()) {
                    return false;
                }
                i = root_.asBool();
                return true;
            } else {
                return Map<isSerialize>(root_, i);
            }
        }
    }
};

template <bool isSerialize>
struct GenericMapper<isSerialize, std::string> {
    Json::Value& root_;
    explicit GenericMapper(Json::Value& obj)
        : root_(obj)
    {
    }

    bool operator()(std::string& s)
    {
        if constexpr (isSerialize) {
            root_ = s;
            return true;
        } else {
            if (!root_.isString()) {
                return false;
            }
            s = root_.asString();
            return true;
        }
    }
};

template <bool isSerialize, class T>
struct GenericMapper<isSerialize, std::vector<T>> {
    Json::Value& root_;
    explicit GenericMapper(Json::Value& obj)
        : root_(obj)
    {
    }

    bool operator()(std::vector<T>& v)
    {
        if constexpr (isSerialize) {
            int index = 0;
            for (auto& t : v) {
                if (!GenericMapper<isSerialize, T>(root_[index++])(t)) {
                    return false;
                }
            }
            return true;
        } else {
            if (!root_.isArray()) {
                return false;
            }
            v.resize(root_.size());
            int index = 0;
            for (auto& e : root_) {
                if (!GenericMapper<isSerialize, T>(e)(v[index++])) {
                    return false;
                }
            }
            return true;
        }
    }
};

template <bool isSerialize, bool isAllFieldRequired = false>
class Mapper {
public:
    Json::Value& root_;
    explicit Mapper(Json::Value& obj)
        : root_(obj)
    {
    }

    template <class Arg>
    bool operator()(Arg& arg)
    {
        return GenericMapper<isSerialize, Arg>(root_)(arg);
    }

    template <class Arg>
    bool operator()(const KVP<Arg>& arg)
    {
        if constexpr (isSerialize) {
            return GenericMapper<isSerialize, Arg>(root_[arg.key])(arg.value);
        } else {
            const Json::Value* child = root_.find(arg.key, arg.key + strlen(arg.key));
            if (child != nullptr) {
                return GenericMapper<isSerialize, Arg>(root_[arg.key])(arg.value);
            }
            return !isAllFieldRequired;
        }
    }

    template <class Arg, class... Args>
    bool operator()(const KVP<Arg>& arg, const KVP<Args>&... args)
    {
        return operator()(arg) && operator()(args...);
    }
};

using SerializeMapper = Mapper<true>;
using DeserializeMapper = Mapper<false>;

template <bool isSerialize, class T>
bool Map(Json::Value& root, T& v)
{
    Mapper<isSerialize> mapper(root);
    return v.MapJson(mapper);
}

}

struct Student {
    std::string name;
    int age;
    std::vector<float> scores;

    template <class Mapper>
    bool MapJson(Mapper& mapper)
    {
        return mapper(JM_KVP(name), JM_KVP(age), JM_KVP(scores));
    }
};

struct ClassRoom {
    std::vector<Student> students;
    int grade;
    int clazz;

    template <class Mapper>
    bool MapJson(Mapper& mapper)
    {
        return mapper(JM_KVP(students), JM_KVP(grade), JM_KVP(clazz));
    }
};

inline bool operator==(const Student& a, const Student& b)
{
    if (a.scores.size() != b.scores.size()) {
        return false;
    }
    for (size_t i = 0; i < a.scores.size(); ++i) {
        if (a.scores[i] != b.scores[i]) {
            return false;
        }
    }
    return a.name == b.name && a.age == b.age;
}
inline bool operator==(const ClassRoom& a, const ClassRoom& b)
{
    if (a.students.size() != b.students.size()) {
        return false;
    }
    for (size_t i = 0; i < a.students.size(); ++i) {
        if (!(a.students[i] == b.students[i])) {
            return false;
        }
    }
    return a.grade == b.grade && a.clazz == b.clazz;
}

int main()
{
    ClassRoom room;
    room.clazz = 3;
    room.grade = 5;
    room.students = {
        { "Bill", 12, { 99, 98, 85.5 } },
        { "Sam", 13, { 99, 98, 84.5 } },
        { "Alice", 11, { 88, 98, 84.5 } },
    };

    Json::Value root;
    jsonmapper::SerializeMapper mapper(root);

    room.MapJson(mapper);

    Json::FastWriter writer;
    std::cout << writer.write(root) << std::endl;

    ClassRoom room_dup;
    jsonmapper::DeserializeMapper demapper(root);
    room_dup.MapJson(demapper);

    std::cout << (room_dup == room) << std::endl;

    return 0;
}